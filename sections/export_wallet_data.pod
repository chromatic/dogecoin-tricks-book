=head1 Export and Extract Wallet Data

Z<export_wallet_data>

X<wallet>
X<Dogecoin Core; wallet>

A wallet is good for keeping your keys and addresses and labels together. In
fact, you can't do much to send or receive Dogecoin without a wallet somewhere.
A node without a wallet can do a lot for the network, but it doesn't do much
for you personally.

A previous tip explained how to back up your wallet
(L<securely_back_up_your_wallet>). This approach works great if you want
toN<... and you do want to!> keep multiple secure copies in multiple places
just in case something happens to your main system.  A wallet backup, if stored
securely, can give you the ability to recover from a disaster like a goat
chewing through your laptop's power cable and bricking your hard drive, but it
gives you little more than redundancy. It treats your wallet as opaque,
obscuring its I<contents>: your private keys, HD key derivation paths, labels,
and addresses.

A plain-text version of your wallet gives you more options--if you handle it
with caution. If you need to operate on this set of data as a whole, exporting
your wallet makes this possible--at the risk of exposing your wallet data in
plain text.

=head2 *Understand the Risks

This tip will produce an unencrypted, plain-text representation of your wallet.
The contents of this file (and the data in your wallet in your nod) shouldn't
be intimidating, but your secrets are most secure when they're kept secret.
This file will contain your private keys I<and> the Dogecoin addresses derived
from those keys. Your private keys will be in a file on your computer in plain
text, and anyone who can get their hands on that file will also get their hands
on those keys--the same way that anyone who gets their hands on your
unencrypted wallet or unencrypted wallet backup has your keys and can spend
your Dogecoin. If you have a cool 100 million Dogecoin in unspent transactions
received by an address, you--or anyone else--can look at this file, find that
address, and see exactly which private key you need to use to I<spend> those
coins.

X<< external programs; C<shred> >>

I<If> you use the knowledge in this tip, use the data in your exported wallet
carefully, then discard of the file effectively. Merely deleting it may not be
enough; on Unix-like systems such as Linux, a BSD, or Mac OS X, use a binary
called C<shred> to mangle the file past the point of hard drive recovery before
deleting it. On Windows, look for a reputable file shredding utility. Even so,
never underestimate the lengths to which someone might go to get your private
data.

=head2 *Dump Your Wallet

X<< RPC commands; C<dumpwallet> >>

The Core RPC command C<dumpwallet> writes the contents of your wallet in a
specific format to a file specified as the argument to the command. Using the
console (L<command_the_core>) or C<dogecoin-cli> or another RPC mechanism, send
the command C<dumpwallet insecure-wallet-shred-now.txt>, then navigate to the
file. You can read it from there.

=begin tip Secure Backups with Dogecoin Core 1.14.6

As of version 1.14.6, Dogecoin Core stores all backups and exports to a
specific backups directory. Unless you've overridden the default location, you
can find these files in the F<backups> subdirectory of the F<.dogecoin>
configuration directory.

For previous versions, you can give the full path to the location on disk where
you want the Core to write your file.

=end tip

=head2 *Inside Your Wallet Dump

When you look at this file, you'll see it's longN<Your author's file is more
than 450,000 lines long.>. There's a short header giving information about the
version of the core used to dump it, the timestamp of the dump, and the most
recent block the Core had seen at the time of the backup.

Then you'll see the private masterkey for HD addresses (see
L<use_a_hd_wallet>), and finally one line for each of your wallet addresses,
something like (lines truncated for brevity):

=begin screen

  QVcp9S... 1970-01-01T00:00:01Z label=2022%20Consult # addr=D7o...
  QAdcVL... 1970-01-01T00:00:01Z label=2023%20Consult # addr=DBx...
  QUt9eE... 2023-04-18T01:02:13Z label=               # addr=D8P...
  QQgGGm... 2021-04-19T22:42:29Z reserve=1            # addr=DP7...
                                 hdkeypath=m/0'/0'/7'

=end screen

This file contains multiple fields, each separated by spaces, with an optional
comment at the end of the line preceded by the C<#> character. The first field
is the private key. The second field is the timestamp when the private key was
added to the wallet. In the third field, you may see a C<label=> (though the
value may be blank, as it is in the third line of this example). You might also
alternately see C<reserve=1>, which indicates that the Core has generated this
address for future use, but nothing has used it yet.

Finally, the comment may include the public address associated with the key.
When the Core has derived the key from an HD seed, you will also see that key's
derivation path in C<hdkeypath>.

=head2 *Extracting Data From Wallet Dumps

After several lines of header information, each private key and address has one
line in the file. If you can read this file, you can get every address out of
it. This sounds like a job for automation, so warm up your favorite programming
language!

The I<easy> way to work with this data is to assume you already have a dump
file somewhere on your system, then read it line by line and extract the data
you want. In pseudocode:

=over 4

=item * loop over every line in the file

=item * skip blank, header, and comment lines (headers and comments look
identical)

=item * split all other lines on space characters into into data chunks

=item * extract address data from the appropriate data chunk

=back

X<concepts; regular expressions>

In the programming world, a I<regular expression> (or I<regex> for short) is a
concise description of the shape of data, like "A capital letter followed by
multiple numerals or letters, up until but not including a space character".
They're very useful, but if you're not familiar with them, they can be
intimidating. That's okay. You don't have to understand them to use this tip!

Regex-wielding programmersN<With no apologies for U<https://xkcd.com/208/>.>
can do this in a couple of lines. Look for a chunk of data starting with
C<addr=>, then capture everything after that until the next space. With
Perl-style regular expressions, write something like C</addr=(\S+)/> and, if
the match succeeds, take the address from the first (only) capturing group.

Once you have this address, you can write it to a file which you can use for
other purposes.

=head2 *Automated Extraction From Wallet Dumps

This approach has two drawbacks. First, you have to write the code yourself.
Second, you have to manage dumping the wallet, processing the file, then
remembering to remove the wallet dump securely.

Another approach is to automate the process: make the RPC call, loop through
the plain-text wallet dump, extract the addresses, write them to a separate
file, then delete the original file. This is a variant of the technique used to
wrap RPC calls with other behavior (see L<enhance_rpc_calls>).

X<< Perl libraries; C<Finance::Dogecoin::Utils> >>
X<< external programs; C<dogeutils> >>

Fortunately, your author has already written code to do all of this with
version C<1.20230424.0253> of C<Finance-Dogecoin-Utils>. The C<dogeutils>
command has an option C<exportaddresses>:

=begin screen

  $ DOGEUTILS_USER=lisa dogeutils exportaddresses > my_address_list

=end screen

As with the previous C<dogeutils> uses, you need your authentication for RPC
configured correctly. Also be sure to redirect the output of this command to a
file, as you may get thousands or more lines of output. Behind the scenes, the
code handles making the wallet export for you as well as deleting the exported
file.

I<Also> review the code before you run it. Even if you trust the author, you
should verify that the code came from a trusted source, has no obvious or
non-obvious bugs, and seems to do what it claims. Any code you download and run
on your private information is a risk.

=head2 *What Can You Do With This?

You can do at least three other things with this data:

=over 4

=item * Skim it and see what you can learn from reading. There's a lot here!
This can be a good springboard for doing more research.

=item * Forget you've exported it, give the laptop to your cousin who wants to
study computer science, and wake up in the middle of the night realizing that
everyone in University may have been able to grab this file off of an
unprotected network share.

=item * Process this file for another purpose, then delete it securely.

=back

To the last point, you can do a I<lot> more with a wallet dump than export
addresses.  You could back up your private keys (especially if you write them
to a file and encrypt it). You can find addresses without labels and figure out
labels for them (and add labels to them). You can look for addresses waiting in
reserve or addresses already used.

This file doesn't contain a large amount of unique data, but it contains data
you can't easily access in other ways, so if you have any needs listed here,
this is your best approach.
