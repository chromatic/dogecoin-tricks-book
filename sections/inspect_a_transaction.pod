=head1 Inspect a Transaction

Z<inspect_a_transaction>

Holding Dogecoin is interesting and spending Dogecoin is fun, but a whole world
of things happens when you do either. The fundamental concepts of blockchains
require that everything happens in public, in a verifiable way: mining coins,
sending coins, receiving coins, et cetera.  The I<mechanism> of your actions is
visible to you and everyone.

Understanding what happens when you send or receive coins can open the door to
a lot of possibilities.

=head2 *What's in a Transaction?

To understand a transaction, think of a ledger. All the bookkeepers and
accountants reading this book can now say "Yes! Finally!" and enjoy the warm
glow for a second. In the simplest terms (and all those bookkeepers and
accountants can say "Oh no, it's not I<that> simple!"), a ledger tracks a few
things:

=over 4

=item * Money entered the system at a specific point in time

=item * Money changed hands at a specific point in time

=item * Money exited the system at a specific point in time

=back

That repeated phrase "at a specific point in time" is essential. At every part
of the process, after every change to the ledger, the numbers should all add up
correctly. If I take a transaction worth 1000 Doge and send you 900 and pay
0.01 in transaction fees, the other 99.99 must go somewhere else, otherwise the
transaction is invalid and the ledger is incomplete.

Thus, transactions have inputs and outputs--and other data.

=head3 *Transaction Inputs

Transaction money must come from I<somewhere>. For you to send the author 100
Doge to buy a copy of this book, you must have access to at least 100 Doge.
With all of the addresses under your control in your wallet, you must find
enough unspent Doge to add up to that 100 Doge threshold, plus enough to cover
the transaction fees.

Make note of the word "unspent" there. If, per the accounting guidelines
earlier, every ledger in the entry balances perfectly, we should be able to
examine every address under your control and see the exact inputs and outputs
and get a perfect balance of the funds you control but have not already spent.
That's the point! On the blockchain, miners verify that the transaction you're
attempting to transact is coherent with regard to the blockchain itself.

To make life easier for miners, a valid Dogecoin transaction requires the
sender to identify the source transaction of every coins used in the
transaction. It's like when you swipe or tap a payment card at your favorite
falafel stand; it's not enough to say "I'll send you the money". You have to
identify the source of the funds.

Clever readers may be asking "What prevents someone from picking an arbitrary
transaction as an input and spending someone else's koinu?" Transaction inputs
also have special data that proves that whoever created the current transaction
can satisfy the conditions to unlock the input transaction(s). There's a lot to
discuss here, so other tips will cover this in more detail.

=begin tip The Ultimate Input

X<transactions; coinbase>
X<blocks>
X<coinbase>

Where do miner rewards come from, if transaction fees are so small? Where did
the initial Dogecoin come from? The first transaction of every block is called
a coinbase transaction. This special transaction type can create more Dogecoin
out of thin air. Every non-coinbase transaction must trace its inputs back to
one or more coinbase transactions.

=end tip

When you're looking at a transactionN<It's not a fireworks factory; we'll get
there soon!>, you'll see one or more inputs, except for coinbase transactions.
This makes ledger bookkeeping work correctly.

=head3 *Transaction Output

Inputs and outputs go together just like taking a kruggerand out of your pocket
puts it in your hand. Without an output, your transaction sits around, doing
nothing.

A transaction can have one or more outputs. Each output contains its own data.
First, it needs the number of koinu included. If you're paying 100 Dogecoin for
a copy of this book, the output needs to contain 100 Dogecoin. Second, the
output needs a condition under which the recipient can spend the provided
Dogecoin. If you're sending this to one of the author's addresses, you need to
provide a cryptographic puzzle that only the owner of the private key behind
that address can solve.

That's not the only kind of condition you can produce, of course, but that's a
topic for another tip (see L<timelock_a_vault>, for example).

=begin tip Transaction Metadata

Transactions also include bookkeeping information, such as the transaction ID.
For now you can ignore most of that information, but you absolutely need the
transaction ID to do anything interesting; it links every transaction in the
blockchain together into a chain.

=end tip

=head2 *What's in a Transaction?

How about looking at a real transaction? If you have the Core running on your
computer and if you have a wallet that's received inputs, use RPC commands to
examine one of your transactions.

X<< external programs; C<jq> >>
X<< RPC commands; C<listreceivedbyaddress> >>
X<< RPC commands; C<getrawtransaction> >>
X<< RPC commands; C<decoderawtransaction> >>

=begin screen

  $ B<TX=$(dogecoin-cli listreceivedbyaddress | jq -r '.[0].txids | .[0]' )>
  $ B<RAWTX=$( dogecoin-cli getrawtransaction $TX )>
  $ B<dogecoin-cli decoderawtransaction $RAWTX>

    {
      "txid": "73dc8...",
      "hash": "73dc81...",
      "size": 225,
      "vsize": 225,
      "version": 1,
      "locktime": 0,
      "vin": [
        {
          "txid": "f806b..",
          "vout": 1,
          "scriptSig": {
            "asm": "...",
            "hex": "..."
          },
          "sequence": 4294967295
        }
      ],
      "vout": [
        {
          "value": 6.90000000,
          "n": 0,
          "scriptPubKey": {
            "asm": "OP_DUP OP_HASH160 3b31b1... OP_EQUALVERIFY OP_CHECKSIG",
            "hex": "76a914...",
            "reqSigs": 1,
            "type": "pubkeyhash",
            "addresses": [
              "DAY5w..."
            ]
          }
        },
        {
          "value": 978.55966000,
          "n": 1,
          "scriptPubKey": {
            "asm": "OP_DUP OP_HASH160 f1e517... OP_EQUALVERIFY OP_CHECKSIG",
            "hex": "76a914...",
            "reqSigs": 1,
            "type": "pubkeyhash",
            "addresses": [
              "DTC7q9..."
            ]
          }
        }
      ]
    }

=end screen

This example truncates some information to reveal the structure of a
transaction without burdening it with details. This transaction has a single
input (in C<vin>), with a reference to a single input transaction (C<txid>).
This transaction also has two outputs (both found in C<vout>). These outputs
have a C<value> of 6.9 and 978.55966 Dogecoin respectively. If you add these
amounts together, you'll come up with almost the same amount as was received in
the input transaction, less a few koinu used for transaction fees.

The command-line commands feed into each other (hence the use of shell
variables). The C<jq> line is only for this example; it looks at all of the
addresses which have received Dogecoin inputs, looks at the first one, looks at
the first transaction, and gets its transaction ID. You could use I<any> valid
transaction ID, including the transaction ID of the input transaction and its
input transaction(s) and so forth, until you reach a coinbase transaction.

This is all easier using a blockchain explorer, but if you do it yourself you
can trust and verify your own copy of the blockchain and not rely on someone
else's opinion.

=head2 *Understand the Risks

There's no risk in exploring the blockchain other than the same risk as always
of running a Core node on a computer hooked up to a network. Issuing these RPC
commands over the network (not on your local machine) has the same risks as
always.

X<people; Andreas M. Antonopoulos>

The biggest risk here is making assumptions about the structure of transactions
and how they work. The "Mastering Bitcoin" bookN<See U<https://amzn.to/3xxDKHf>
or U<https://github.com/bitcoinbook/bitcoinbook>.>, by Andreas M. Antonopoulos,
explains transactions in much greater detail. It's a good reference for anyone
interested in the structure and use of transactions and Bitcoin-style
technology in general.
