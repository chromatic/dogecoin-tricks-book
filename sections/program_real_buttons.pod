=head1 Program Real Buttons

Z<program_real_buttons>

Before business starts booming in your little arcade, you have to fill in some
gaps. You've figured out whether you want to use dedicated addresses per
machine, a token payment system, or an Ã  la carte system. You don't want people
to put dollar bills, quarters, or other minted coins into your machines--too
much to manage, too unhygienic, too easy to get ice cream everywhere.

Now you need a way to turn a Dogecoin payment into a game credit--some way to
turn a blockchain transaction into a button push, a switch flip, or a relay
click. You have options.

=head2 *Programmable Relays

What happens when you put a quarter in a pinball machine? You put the coin in a
slot. The coin rolls down a ramp, and, if the coin is valid, it hits a switch
(connecting two wires and closing a circuit) and falls down into a hopper
(releasing the switch and disconnecting the wires and opening the circuit). The
important part here is that the coin toggles a switch.

When your cabinet registers the switch toggle, it adds credits to the machine,
which allows you to press the one or two-player button and start the game. Your
cabinet doesn't care that a quarter toggled the switch. It only cares about the
circuit closing and then opening. You could achieve the same thing by replacing
the coin mechanism entirely, jumping the circuit with a little piece of
wireN<Don't actually do this; you're liable to zap yourself.>, or I<installing
your own button>.

For this to work, assume you're okay adding new hardware to your existing
cabinets, you feel fine using wifi to control I<something>, you will enjoy
doing a little bit of programming and configuration and hardware manipulation,
and you can spend a little bit of money. You can change any of those
assumptions, but the basic concept remains: you must turn a computer signal to
a physical pinball signal.

The easiest way to do this is to use a programmable relay. A programmable relay
is essentially a switch controlled by a small computer. A switch, of course, is
a device that connects two wires. When it's on, the wires are connected. When
it's off, the wires aren't. Connect this relay to the appropriate circuit
inside your cabinet and now you can toggle the switch and the machine will act
as if you'd inserted a quarter.

=head3 *Finding a Good Programmable Relay

For the purpose of this exercise, we'll assume that you have access to a
programmable relay board such as an ESP8266 4-relay boardN<You can find this
from many reputable electronics suppliers for less than $5 USD.>. The ESP8266
chip is a tiny 32-bit computer with wifi and some programmable capacity.  The
relay part is four little programmable switches. While you can buy a 1-, 2-, or
8-relay board, hold that thought.

=head3 *Improving a Programmable Relay

This board and chip have good and reliable open source firmware available. This
will help!  The Tasmota firmware worked well in your author's experimentsN<See
U<https://tasmota.github.io/docs/Getting-Started/> to begin.>. To make this
work, you must flash the new firmware onto the chip, which requires you to use
a USB-to-serial adapter and a careful hand to connect the correct pins to the
correct wires on the board. Read the directions carefully.

When you flash the board, you'll get an option to connect to the board over
wifi to configure it to connect to a different wifi network (provide your
credentials) and program the relays to your liking. You'll find many other
options to play with, but for now, you only need to toggle the relays.

=head3 *Programming the Relay

This is where things get more interesting. Think back to your cabinet's coin
mechanism. The coin insertion switch closes for a fixed period of time then
opens again. You need to emulate that sequence of events--circuit on, wait,
then off. Your relay board must receive an event from the network, close the
switch, wait for a fixed period of time, then open the switch again.

How do you know how long to wait? You can experiment with different times, but
the best approach is to get the service manual for your cabinet and understand
the scan times of the circuits. In general, start with a quarter of a second
and adjust from there--perhaps up to half a second.

=begin tip Arcade Controller Scan Matrix

What governs how long the switch must remain closed? It's all about your
machine. Your cabinet is doing a lot of things at once. It scans every
potential input once every I<n> milliseconds. The capacitors and resistors on
the controller board help debounce the switches, to smooth out any spikes and
turn one analog event into one digital event. The controller may also have
software controls to debounce the values. Careful measurement and timing will
give you the answer. Or you can experiment with the given values.

=end tip

=head3 *Testing the Program

X<< external programs; C<curl> >>

With the Tasmota firmware on the ESP8266, you can control the relay with MQTT
(your best option for a complex configuration) but also simple HTTP (for
testing or a simple network). You'll need to write a program or use C<curl> to
send these requests. Here's a simple example that tells the relay to close for
200 milliseconds, then turns on the relay, then lets it close:

=begin programlisting

  $ B<curl http://192.168.1.10/cm?cmnd=PulseTime1%202>
  $ B<curl http://192.168.1.10/cm?cmnd=Power1%20ON>

=end programlisting

In this example, the board has an IP address of 192.168.1.10 and the relay to
toggle is relay 1. Change the example appropriately for your board. The
C<PulseTime> command sets the time the relay will stay on in milliseconds. As
you might expect, relay 2 uses the command C<PulseTime2> and so forth.
Similarly, the C<Power> command turns the relay on or off, with the appropriate
relay number and the subcommand C<ON> or C<OFF>.

Remember that the characters C<%20> represent a space encoded in a URL.

Before you open the inside of your cabinet and start poking around with a
multimeter, test your relay board by connecting an LED to the switch and
running your program. Make sure your test LED supports the voltage you're
sending!

When your LED flashes on and off for the right timing, you're ready to move on!
You should be able to send both commands, see the LED light, and then turn off
in the right amount of time. From there, your program is working and you can
integrate it with your payment receiving webhooks!

=head2 *What Can You Do With This?

You can use a programmable relay to turn on a light, open a door, drop cat food
into a bowl, and do anything you can imagine a switch would control. In terms
of your arcade, you can add credits to a machine, sure, but you can also turn
I<off> the machine entirely, turn on a siren, or do anything else.

A multi-relay board will allow you to control multiple machines from a single
board. You'll have to run wires between them somehow, which may mean drilling
into your cabinets from the bottom or adding another wire to a harness
elsewhere.

Keep in mind a few limitations, however. First, using a wifi-enabled board
means you have a wifi network available. Anyone who can get access to that
network has the potential to get access to your system and can control your
machines. That may not be a security problem for you, but if you also keep your
Dogecoin payment system and wallet on the same network, then attackers have
I<two> interesting systems to exploit.

Second, you're limited by the number of relays on the board as well as any
other physical limitations. If all of the cabinets connected to a single board
have the same type of switches (all five volt relays, for example), then you
have a simpler time connecting them all together. If they differ--as they
likely do--then you have to be careful about how you wire things together.

Third, any oddities of the board or its relays will affect your network. For
example, this Tasmota firmware will turn on relay 1 when the board first
bootsN<See U<https://templates.blakadder.com/ESP12F_Relay_X4.html>.>. This may
or may not be a problem; you may or may not want to work around it.
Furthermore, any time the board reboots, you may lose configuration you'd
set--so while it's appropriate to set the pulse time once on boot, you may want
to set it before every pulse. That way, you I<know> the relay will perform as
expected for every command you send it (and sending two HTTP requests is almost
as cheap as sending one).

Finally, the board itself needs power. The board in this example has a lot of
power options including wall warts, USB power, and direct-circuit connections,
but that's for you to figure out, lest you fry the board or have to spend a lot
of time thinking about how to get electricity from the wall to it.

On the other hand, the thought of tapping a friendly Doge icon on your phone
and seeing an arcade machine light up, inviting you to play, is cool.
