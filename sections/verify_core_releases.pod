=head1 Verify Core Releases

Z<verify_core_releases>

One of the themes of this book is "you can and should check and double-check
things yourself". Nowhere is this more true than with the wallet software
you're running. If you use the Dogecoin Core (or any software really), you
should be able to assure yourself that the code is what you expect it to be.

At some point you still have to trust that the developers are doing what they
say they're doing and the code they've designed and written and tested and
reviewed does what it should, but trustworthy developers and maintainers will
go out of the way to give you multiple, cooperating mechanisms to increase your
confidence and decrease your risk.

When a new Dogecoin Core release comes out, here's what you can do to verify
that the code you're thinking of running hasn't been replaced, misplaced, or
malformed.

=head2 *Release Signatures and Checksums

With the current Core development process (see L<follow_core_development>) at
the time of this writing, Dogecoin Core releases have a Git tag and
accompanying release notes. For example, see the 1.14.6 release notes at
U<https://github.com/dogecoin/dogecoin/releases/tag/v1.14.6>.

While these release notes have a lot of useful information, they include three
data points essential to your verification. First, take note of the person who
made the release (L<figure-dogecoin-core-1.14.6-release-notes-author>). In this
case, it's C<patricklodder>.

=begin figure Dogecoin Core 1.14.6 Release Notes with Author Highlighted

Z<figure-dogecoin-core-1.14.6-release-notes-author>

F<images/dogecoin-core-1.14.6-release-notes-author.png>

=end figure

=head3 *What Would Patrick Sign?

Now that we know Patrick performed this release, we have another piece of data
to verify. Navigate to the C<v1.14.6> tag, then the
F<dogecoin/contrib/gitian-keys/> directory. You will see a file called
F<patricklodder-key.pgp> (L<figure-dogecoin-core-1.14.6-gitian-keys>).

=begin figure Dogecoin Core 1.14.6 Release Gitian Keys

Z<figure-dogecoin-core-1.14.6-gitian-keys>

F<images/dogecoin-core-1.14.6-gitian-keys.png>

=end figure

X<GPG>
X<< external programs; C<gpg> >>

=begin tip PGP? GPG? Make up your mind!

PGP stands for Pretty Good Privacy. It's an specification of asymmetric
cryptography, codified for the Internet at large in RFC
4880N<https://www.ietf.org/rfc/rfc4880.txt>. GPG stands for GNU Privacy Guard,
a free software implementation of RFC 4880. While technically GPG signatures
are PGP signatures, you'll hear people refer to them interchangeably.

Install GPG from U<https://gnupg.org/>.

=end tip

This file contains the public half of a GPG keypair. Patrick has the other
private half. Download this file, then import it into your local C<gpg> keyring:

=begin screen

  $ B<gpg --import ~/Downloads/patricklodder-key.pgp>
  gpg: key 2D3A345B98D0DC1F: public key "Patrick Lodder <...>" imported
  gpg: Total number processed: 1
  gpg:               imported: 1

=end screen

When you do this, you give C<gpg> the ability to verify that any file that
claims Patrick has signed it was actually signed by Patrick. He uses his
private key to add a signature to a file, then distributes his public key. Take
a look at that F<SHA256SUMS.asc> file from the GitHub release. Download it and
you'll seeN<I've trimmed the signatures slightly to fit in the book's
formatting; they're much longer in the actual file.>:

=begin screen

    -----BEGIN PGP SIGNED MESSAGE-----
    Hash: SHA256

    87419c...  dogecoin-1.14.6-aarch64-linux-gnu.tar.gz
    d0b7f5...  dogecoin-1.14.6-arm-linux-gnueabihf.tar.gz
    3e60c4...  dogecoin-1.14.6-i686-pc-linux-gnu.tar.gz
    fc2a85...  dogecoin-1.14.6-osx-signed.dmg
    bf6123...  dogecoin-1.14.6-osx-unsigned.dmg
    c3dd01...  dogecoin-1.14.6-win32-setup-unsigned.exe
    c919fd...  dogecoin-1.14.6-win32.zip
    888429...  dogecoin-1.14.6-win64-setup-unsigned.exe
    709490...  dogecoin-1.14.6-win64.zip
    fe9c9c...  dogecoin-1.14.6-x86_64-linux-gnu.tar.gz
    -----BEGIN PGP SIGNATURE-----

    iQEzBAEBCAAdFiEE3G70qL+fGx5N4e5SLTo0W5jQ3B8FAmLYV60ACgkQLTo0W5jQ
    3B+PZgf/fgOBO1ZTLO7Kb6HGLDzN0S9M7BmF4igBPO/9/kd06RobbbOb2b/hzu0O
    wo5IWha6XzbzIJ89hAzZiCuYdGPg84hacQzKxdN1lhOAKQZH9sjEPng/uPcC0Gug
    nE5dJzc7/gDi5Esgbod5cgWSATKNeGRlRnb5nUauimyPMnzr/uDHJkCz4IRsA2Oe
    KD2OGTKIuyKY6H2Ex3TALRprBkFfnciZVgOMZZxFP/yH07SjVmF6yeBdNMmgbwv1
    YgX4sJyNMjvIJvSWTpJrZszsG5jph5xtRl5Mwz9qcYJQ6CvQqmgu+UXUnTKVkf1A
    5OEJ8p4n8j5l+K8CZ2DrwEFhy/eS1w==
    =cbzO
    -----END PGP SIGNATURE-----

=end screen

That PGP signature is what Patrick generated when he produced this release. If
anyone has tampered with this file since Patrick produced and signed it, the
PGP signature will be invalid.

Validate the signature of the file with:

=begin screen

  $ B<gpg --verify ~/Downloads/SHA256SUMS.asc>
    gpg: Signature made Wed 20 Jul 2022 12:29:49 PM PDT
    gpg:                using RSA key DC6EF4A8BF9F1B1E4DE1EE522D3A345B98D0DC1F
    gpg: Good signature from "Patrick Lodder <...>" [unknown]
    gpg: WARNING: This key is not certified with a trusted signature!
    gpg:          There is no indication that the signature belongs to the owner.
    Primary key fingerprint: DC6E F4A8 BF9F 1B1E 4DE1  EE52 2D3A 345B 98D0 DC1F

=end screen

The signature is good; the file is pristine since Patrick generated and signed
itN<That warning looks a little concerning; we should probably find a way to
fix that.>.

=head3 *What Did Patrick Intend?

What do we know now?

=over 4

=item * Patrick made this release

=item * Patrick created a file containing signatures for all of the files in the release

=item * Patrick signed the signature file with his private GPG key

=item * The signature file has not been modified since Patrick generated and signed it

=back

This gives us a lot of confidence that the signatures of the files listed in
the signature file are trustworthy, I<if we trust Patrick and the other Core
developers>N<You don't have to trust the Core developers. Your author thinks
they're trustworthy, but your author isn't going to tell you what level of risk
and trust you're comfortable with.>.

X<< external programs; C<sha256sum> >>

With all of that established, download the file corresponding to your operating
system. Then run a command like:

=begin screen

  $ B<sha256sum dogecoin-1.14.6-x86_64-linux-gnu.tar.gz>
  fe9c9c...  dogecoin-1.14.6-x86_64-linux-gnu.tar.gz

=end screen

If the I<full> signature for the command you ran on the file matches the
signature from the file Patrick signed, you can have confidence that the file
you downloaded is the file Patrick and the Core developers wanted you to
download.

=head3 *Who Watches Patrick?

You don't have to take only Patrick's word for it though. For every Core
release, the developers create a GitHub issue to track the release tasks. For
the 1.14.6 release, you can see this at
U<https://github.com/dogecoin/dogecoin/issues/2975>. On this ticket, multiple
developers (both maintainers and contributors) must independently build the
release files on all platforms and provide the signatures and all of the
signatures must match before the release can go public.

Look at the comments on the issue; Patrick, Michi, chromatic, xanimo, and Alam
all performed this task and all of our signatures match in the comments and in
the signatures file. Any interested developer can perform this validation for a
work in progress, and if their signatures do not match, the Core maintainers
can stop the release process to investigate what's going on.

=head2 *Understand the Risks

Whew! That's a lot of work to ensure that the files provided are the files the
developers intended to release. For someone to tamper with this, they'd have to
go to a lot of effort to compromise a developer's keys, replace a lot of data
in a lot of places, or generate a malicious file that somehow produced exactly
the checksum of the original file.

The latter is only I<theoretically> infeasible, to the best of our knowledge
now. If at some point in the future this becomes practical, the Core will have
to switch to another verification/validation mechanism. Whenever this happens,
keep your eyes and ears open for lots of publicity about how to ensure that
what you're running is actually what you intend to run.

=head2 *What Can You Do With This?

Hopefully all of this process improves your confidence that the Dogecoin Core
you're running is the Core the developers created and verified and released.
This work doesn't prevent bugs, of course, but it helps guard against imposters
and frauds sneaking unwanted code onto your system.

If you get your Core from a third-party repository, such as a Linux
distribution vendor, Homebrew, Chocolatey, or another packaging system, review
their process and pipeline to see if they perform these verifications. If they
don't, tread with caution.
