=head1 Build with Dogecoin

Z<build_with_dogecoin>

Some people want to enhance or replace the global financial system. Some people
want to send money across the world for fractions of a cent in seconds. Some
people want to make micropayments and tiny transactions feasible for an
Internet-connected world.

If the only thing we ever did with our funny, dog-themed cryptocurrency were to
trade memes, have fun, and tip each other back and forth that would be enough.
We can do more.

All of these are possible. All of these are happening. Some of these are the
precursors to other new, interesting, useful, creative, and fun things. For
example, this book includes a chapter on using Dogecoin as the payment
mechanism for coin-operated systems such as pinball machines, jukeboxes, and
vending machines (see L<chapter_dogecade>).

Putting the pieces together for I<your> project is up to you. Building that
system well is a lot easier if you're working with a community of smart, fun,
helpful people. That's one of the goals of Dogecoin: do good things together?

=head2 *Find Your Project

Working with other people to build something amazing sounds amazing, but
without something specific to build, you might feel like the business school
graduate going to the computer science job fair and trying to find a cofounder
for your great new startup ideaN<Especially if your startup idea is "Let's make
a really popular app!">.

What motivates I<you>? What problems do you face? What doesn't exist, but if it
did, would make your life easier or more pleasant or more enjoyable? What
frustration would you like to go away?

Z<obscure references; "No Cars Go">

When you close your eyes, in the moment between the click of the light and the
start of your dream, what idea won't stop dancing in your brain? I<That's> your
project. When its shape starts to become real, grab something to take notes
about what it really is. What does it do? What doesn't it do? How does it feel
to use it?

Write down your ideas. Draw pictures. Make lists. Write a press release from
the future as you're bragging about shipping the first version of your project
that you can be proud of.

Then make a bunch of little lists of how the features start to work together.
This won't solve all of your problems, and it won't magically make things
appear, but it will help you talk to the right people about the right
things--especially if you know the two or three essential things you absolutely
have to have. Then you're ready to start building with other people.

=head2 *Find Your Community

You may think "But I'm not a developer" or "I'm only a junior developer".  What
can you do? Plenty! For example, although your author wrote a lot of code and
proofs of concepts and so far has managed not to destroy any hardware proving
that his ideas will work, he's only one person with some ideas, some
implementation, and the stubbornness to manage a lot of things he understands
by himself.

If you were to adopt his code for your own purposes, you might find that it
doesn't work in some obvious ways, or that it's missing important features, or
that you're missing some essential customization. All of these can be the basis
of a useful I<conversation>--ideally one before you've struggled with someone
else's software and cried out in frustration.

Your requirements--the essential things you absolutely must have--are vital to
the conversation, especially for good developers who want to build things that
other people find useful and usable.

You might find yourself challenged on what you want to build and why. A good,
healthy community makes this an act of creativity and collaboration. "Why do
you want to do I<that>?" can be a question motivated by genuine curiosity and
care, especially for novel and unique ideas.

This is where the cooperation comes in. You may have to explain your idea and
you may have to explore other implementation options, even going so far as
trying software under development with an open mind.

=head3 *Create or Fork Your Community

If you can't find a community that's working on the same things you are, you
may have to build one. If you can't find a community where you fit and can
work, you may have to fork it. That's okay too, and it's not as violent as it
sounds. Think of a road which splits into two diverging paths to go around a
hill. The paths still end up going somewhere useful and they both acknowledge
the obstacle, but they take different approaches.

The world of free and open source software practices this on a regular basis.
The license of the code itself often supports this behaviorN<But make sure of
this before you start over with existing code!>. That's where Dogecoin came
from--a fork of a fork of Bitcoin source code, with unique changes over the
years and other changes borrowed liberally and thankfully from other projects.
We work better when we work together.

You're also always welcome to start your own project from an empty
directory and a good idea. That's how many projects start too!

=head3 *Join an Existing Community

If you want to join an existing community to find like-minded people, consider
working with the Internet of DogeN<See
U<https://github.com/chromatic/internet_of_doge>.> community. This is an
incubator for Dogecoin-related projects including:

=over 4

=item * The aforementioned arcade machine payment system

=item * A sponsorship program for creators, like Patreon, but paid in Dogecoin

=item * A Dogecoin-based crowdfunding platform

=back

Another exciting community is very.engineerN<See U<https://very.engineer/>.>.
This project focuses on building hardware systems for Dogecoin, including
small, inexpensive devices to run Core nodes.

Finally, the Dogecoin Foundation has several projects built on and around the
Dogecoin network protocol. Check the ForumsN<See
U<https://forum.dogecoin.org/>.> to discuss these and like-minded projects:

=over 4

=item * A payment processing system for merchants (invoice-based)

=item * An embeddable shared library to work with the Dogecoin network protocol
and addresses

=item * A project to relay transactions over long distances using radio signals

=back

=head2 *Understand the Risks

Working with other people can be as difficult as it is rewarding. Sometimes
people get hung up on their own ideas and ways of working. Other times people
are quick to criticize and slow to help. Sometimes people are mean.

You can control only yourself. If you're working with other people, set your
boundaries and expectations, and influence the community to grow in healthy
ways and avoid unhealthy behaviors. This doesn't mean avoiding disagreement or
conflict. Those can be good if handed well--discussions can lead to better
ideas and clearer understandings, especially if you're willing to speak (and,
sometimes, change) your minds.

As a concrete example, your author does most of his prototyping work in Perl,
because he's used it for a long time and knows a lot of the tips and
tricksN<See his book I<Perl Hacks>, for example, at
U<https://amzn.to/3RfIho6>.>. However, he's comfortable working in other
languages and willing to learn new ones. If writing the backend services for a
Dogecoin project in Python means that more people can contribute, he'll do
that.

There may be I<technical> reasons to prefer Perl or Ruby or Golang or Rust or
Node.js or PHP or any of a hundred other languages, but the human factor of
people's contributions is even more important. The problem's we're I<trying> to
solve with programmable money is how to work I<together> without giving up our
own power and without centralizing authority in hands we can't trust.
