=head1 Replenish Your Address Pool

Z<replenish_your_address_pool>

X<wallet>
X<Dogecoin Core; wallet>

If you're regularly receiving transactions--perhaps doing a lot of consulting,
selling things online, or otherwise doing something interesting, you'll need a
lot of addresses. While other tips demonstrate ways to automate this process,
that work can be more suitable for running some kind of e-commerce system than
if you're comfortable grabbing an unused address from the Core a couple of
times a week or a couple of times a day.

Fortunately, Dogecoin Core maintains a pool of unused addresses so that you
always have fresh addresses available. By default, this pool has 100 addresses
in it. When you use the last one, the Core will generate more.

This is under your control. While you don't have to do anything to keep a
steady supply of unused addresses available, you I<can>--especially if you're
going to be going through a lot I<or> if you make a lot of backups and want to
be sure your backups contain all of your addresses.

=head2 *Understand the Risks

If you're not running an HD wallet (see L<use_a_hd_wallet>), keeping a key pool
around is I<essential>. Deterministic address generation from an HD wallet
removes much of the risk that you'll lose addresses if you generate new
addresses and miss them between backups.

With all that said, I<should> you use this feature? There's little risk from
doing so, as long as you keep your wallet backups safe and secure (see
L<securely_back_up_your_wallet>). Consider this one more reason to upgrade your
wallet to take advantage of HD features. The Core's key management approach
before deterministic address generation had risks. Keys were generated by
random numbers and addresses produced from those keys. You can see how the new
key management and derivation system mitigates those risks.

=head2 *Key Pool Refill

X<< RPC commands; C<keypoolrefill> >>
X<< RPC commands; C<getinfo> >>

The C<keypoolrefill> RPC command tells the Core to generate new keys. With no
argument, it'll generate 100 more. If you provide a value, it'll generate that
many more.

Use the C<getinfo> RPC command to see the current size of the keypool; look at
the C<keypoolsize> entry in the returned object.

X<< configuration options; C<keypool> >>

One final note: the C<keypool> configuration option set in your
F<dogecoin.conf> file or specified on the command-line changes the default
number of entries in the keypool. If you choose a value other than 100, use
C<keypoolrefill> to ask the Core to fill the pool up to that number (assuming
you choose a higher number).
