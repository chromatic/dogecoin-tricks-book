=head1 Take Actions on New Blocks

Z<take_actions_on_new_blocks>

Dogecoin is an ever-increasing network of transactions. Each transaction occurs
as a specific item in a block. Each block has a specific order in the
blockchain, and each block comes in at a specific time. If you think of
Dogecoin that way, you can see it as a network of transactions that's also a
series of events.

This is a powerful idea you can use to do many interesting things. Consider
payment processing. When a block gets mined, look for any payments to any
address you're interested in, then do something based on the source address,
the destination, the amount, any script in the transaction, or whatever.

You could also monitor the health of the network as a whole by looking at time
between blocks, number of transactions in a block, number of coins transferred
in a block, difficulty change in blocks over time, or any other piece of data
available.

Dogecoin Core gives you options to treat these events as events, so you can do
these interesting things and more.

=head2 *Configuring C<blocknotify>

X<< Dogecoin Core; configuration; C<blocknotify> >>

Dogecoin inherited a Bitcoin feature called C<blocknotify>. This is a
configuration option available from the command line or set in F<dogecoin.conf>
which allows you to ask the Core to launch an external command whenever the
Core processes a new block.

You can pass two options to this command: the I<number> or I<height> of the
block and the I<hash> of the block. With that, you have everything you need to
do much, much more.

How do you make this work? First, configure your node for RPC. Be aware of the
risks of doing so, and follow all the security guidelines to your degree of
comfort and safety. Second, write a command that does something useful. Third,
launch or re-launch your node.

That's it.

=head3 *Processing a New Block

Let's start by writing a simple command that shows basic block statistics, such
as the number of transactions, difficulty, time, and size of a block. This code
re-uses some example code to perform authenticated RPC (see
L<enhance_rpc_calls>), so you can focus on the behavior:

=begin programlisting

    #!/usr/bin/env perl

    use v5.038;

    use JSON;
    use Path::Tiny;
    use RPCAgent;

    exit main( @ARGV );

    sub main( $height, $hash ) {
        my $config = get_config( $ENV{CONFIG_FILE} );
        my $rpc    = create_rpc( $config );
        my $block  = $rpc->get_block_by_hash( $hash );

        my $stats  = analyze_block( $block );

        say <<~END_HERE;
        Found block $height
        Processed at $stats->{time}
        Contains $stats->{num_tx} transactions
        Size of $stats->{size}
        Difficulty of $stats->{difficulty}
        END_HERE

        return 0;
    }

    sub analyze_block( $block ) {
        my $num_tx = $block->{tx}->@*;
        my $time   = localtime $block->{time};

        return {
            num_tx     => $num_tx,
            time       => $time,
            difficulty => $block->{difficulty},
            size       => $block->{size},
        };
    }

    sub get_config( $config_file ) { ... }
    sub create_rpc( $config )      { ... }

=end programlisting

If you haven't read much Perl, don't fret at some of the syntactic details.
The first handful of lines set the version of Perl (the latest stable release,
as of this writing, to use a few newer features) and load a couple of useful
modules, including C<RPCAgent>, the secure authentication code. All I<that>
code does is wrap calls to the Core's RPC listener in a Perlish interface, so
that the line C<< $rpc->get_block_by_hash( $hash ) >> doesn't have to manage
the details of providing the right HTTP headers. Everything's already set up.

The interesting work is in C<main()> and C<analyze_block()>.

C<main()> starts the action. It reads a configuration file (more on that in a
moment) containing data to set up an object to perform RPC requests.

When this code runs, it gets two arguments, the height and hash of the new
block.  The RPC call gets all of the block's data with that hash. The Core
returns that data as a JSON data structure, but the C<RPCAgent> code turns that
into a Perl data structure (a nested hash, or a dictionary as you might call it
in Python, or a hashmap in Java, or an object in JavaScript, or...).

From there, C<analyze_block()> extracts useful data from that data structure.
Difficulty and size are obvious fields. The block's time is in a field named
C<time>, but that records seconds since the epoch, so the code uses Perl's
C<localtime> to turn that into a textual representation. Finally, the I<number>
of transactions is interesting, so the code uses the standard Perl idiom to
access the items in the C<tx> field (representing transactions) as a scalar
value, representing the count of items in the array.

=begin tip But I Don't Read Perl!

"Context? Scalar? That's unique! Also, wow, look at the sigils!" I<De gustibus
non est disputandum>, but your author I<also> wrote a book called I<Modern
Perl> that explains all this stuff and more, so head over to
U<http://modernperlbooks.com/> and download a free copy. You'll have one more
interesting tool in your toolkit!

=end tip

When C<main()> gets the results, it prints the transction's description. It
will look something like:

=begin screen

    Found block 4485057
    Processed at Wed Nov 23 15:15:28 2022
    Contains 12 transactions
    Size of 3979
    Difficulty of 12696685.226509

=end screen

To use this code yourself, you'll need to set up the configuration file and
create an C<RPCAgent> object. If you have much programming experience, you can
probably imagine what they look like anyhow.

=head3 *Launching Your Program

X<< external programs; C<cron> >>

How does this get executed? Start by adding a line to your F<dogecoin.conf>
file to add this command. This shell wrapper sets up the execution environment
correctlyN<As you might do for a C<cron> command.>:

=begin programlisting

    #!/bin/bash

    cd "${HOME}/dogecoin-tricks-book/"
    export CONFIG_FILE="./chapter_3/env.json"

    perl -Ilib bin/show_block_stats.pl $*

=end programlisting

This file sets the path to the RPC credentials configuration file and makes
sure Perl knows where to find the C<RPCAgent> module. All that's left is to add
a single line to F<dogecoin.conf>N<Linebreaks are for formatting; they're not
needed.>:

=begin programlisting

  blocknotify=/bin/bash \
    "${BOOK_HOME}/chapter_3/bin/launch_listener.sh" \
    "%i" "%s" >> blocks.log

=end programlisting

If you've set up a C<cron> job, this will also look familiar.

The C<%i> parameter is the height of the new block and the C<%s> parameter is
the hash of the new block. Whenever the Core processes a new block, it'll
launch a system process and pass those two values as variables. In this case,
the system will invoke the C<bash> shell which will itself invoke C<perl>.

As with other changes to F<dogecoin.conf>, you'll have to restart your node
before the Core will start executing this command.

=head2 *Understand the Risks

Any time you use RPC against a local Core, you should enable authentication and
authorization (see L<authenticate_rpc_securely>) and keep unauthorized activity
away from your node. This is especially true if you have a wallet attached to
your node. Anyone who can connect to your node via RPC can get a lot of data
you might not want to expose and take network actions you might not want to
permit.

Second, be aware that you could write buggy codeN<Your author's first few
attempts had bugs!>. The abstraction here of a shell script calling another
program lets you test your RPC code in isolation by calling it with block
heights and hashes you already have on hand. That leaves you free to test the
F<dogecoin.conf> integration later, rather than having to do both at
once--especially as any change to the F<dogecoin.conf> code means relaunching
your node.

If you do get your program into a crash loop, you might harm the stability of
the system and the experience for you and others on the machine. Don't let that
stop you from doing interesting things but do be careful to think about what
could go wrong.

=head2 *What Can You Do With This?

Perhaps you can light up a lava lamp whenever you make or receive a
transaction.

You could update a counter on a webpage or post a message to Slack or Discord
(see L<post_to_discord>) with every new block mined.

You could plot the size and fullness of blocks over time.

You could keep a list of the busiest wallets over the past day, week, or month.

What interesting ideas do I<you> have now? Be creative!
