=head1 Take Actions on New Blocks

Z<take_actions_on_new_blocks>

Because Dogecoin is an ever-increasing network of transactions, you can think
of interesting ideas if you realize that a network of transactions is a series
of events.

Payment processing is an easy and obvious idea. When a block gets mined, look
for any payments to any address you're interested in, then do something based
on the source address, the destination, the amount, any script in the
transaction, or whatever.

You could also monitor the health of the network as a whole by looking at time
between blocks, number of transactions in a block, number of coins transferred
in a block, difficulty change in blocks over time, or any other piece of data
available.

Dogecoin Core gives you options to treat these events as events, so you can do
the interesting things you have in mind.

=head2 *Configuring C<blocknotify>

Dogecoin inherited a feature from Bitcoin called C<blocknotify>. This is a
configuration option available from the command line or set in F<dogecoin.conf>
which allows you to ask the Core to launch an external command whenever the
Core processes a new block.

You can pass two options to this command: the I<number> or I<height> of the
block and the I<hash> of the block.

With that, you have everything you need to do much, much more.

How do you make this work?

First, configure your node for RPC. Be aware of the risks of doing so, and
follow all the security guidelines to your degree of comfort and safety.

Second, write a command that does something useful.

Third, launch or re-launch your node.

That's it.

=head3 *Processing a New Block

Let's show this off by writing a simple command that shows basic block
statistics, such as the number of transactions, difficulty, time, and size of a
block. As it turns out, I already have some code in Perl that performs
authenticated RPC, so I'll reuse that and gloss over some of the details.

=begin programlisting

    #!/usr/bin/env perl

    use v5.036;

    use JSON;
    use Path::Tiny;
    use RPCAgent;

    exit main( @ARGV );

    sub main( $height, $hash ) {
        my $config = get_config( $ENV{CONFIG_FILE} );
        my $rpc    = create_rpc( $config );
        my $block  = $rpc->get_block_by_hash( $hash );

        my $stats  = analyze_block( $block );

        say <<~END_HERE;
        Found block $height
        Processed at $stats->{time}
        Contains $stats->{num_tx} transactions
        Size of $stats->{size}
        Difficulty of $stats->{difficulty}
        END_HERE

        return 0;
    }

    sub analyze_block( $block ) {
        return {
            num_tx     => scalar $block->{tx}->@*,
            time       => scalar localtime $block->{time},
            difficulty => $block->{difficulty},
            size       => $block->{size},
        };
    }

    sub get_config( $config_file ) { ... }

    sub create_rpc( $config ) { ... }

=end programlisting

If you haven't read much Perl, don't fret. It's relatively easy to follow
despite some of the syntactic details looking a little odd. The first handful
of lines set the version of Perl (the latest stable release, as of this
writing, so I can use a few newer features) and load a couple of useful
modules, including C<RPCAgent>, the code I alluded to earlier.  All I<that>
code does is wrap calls to the Core's RPC listener in a Perlish interface, so I
can write C<< $rpc->get_block_by_hash( $hash ) >> and not have to think about
the details of providing the right HTTP headers. Everything's already set up.

The interesting work is in C<main()> and C<analyze_block()>.

C<main()> starts the action. I've set up a configuration file you'll read more
about in a moment. That configuration gives me enough data to set up an object
that performs the RPC requests.

When this code runs, it gets two arguments, the height of the new block and the
hash of the new block. The RPC call gets all of the block's data with that
hash.  The Core returns that data as a JSON data structure, but the C<RPCAgent>
code turns that into a Perl data structure (a nested hash, or a dictionary as
you might call it in Python, or a hashmap in Java, or an object in JavaScript,
or...).

From there, C<analyze_block()> takes that data structure and pulls out a few
pieces of data. Difficulty and size are obvious fields. Obvious transformation
is obvious there. The block's time is in a field named C<time>, but that
records seconds since the epoch, so I use Perl's C<localtime> to turn that into
a textual representation. Finally, the I<number> of transactions is
interesting, so I use a standard Perl idiom to look at the array of items in
the C<tx> field (representing transactions) and get a scalar value,
representing the count of items in the array.

=begin tip But I Don't Read Perl!

"Context? Scalar? That's unique!" I<De gustibus non est disputandum>, but I
wrote a book called I<Modern Perl> that explains all this stuff and more, so
head over to U<http://modernperlbooks.com/> and download a free copy. You'll
have one more interesting tool in your toolkit!

=end tip

When C<main()> gets the results, it then prints a description of that
transaction. It will look something like this:

=begin screen

    Found block 4485057
    Processed at Wed Nov 23 15:15:28 2022
    Contains 12 transactions
    Size of 3979
    Difficulty of 12696685.226509

=end screen

I've elided the configuration file setup and the C<RPCAgent> object creation.
If you have much programming experience, you can probably imagine what they
look like anyhow.

=head3 *Launching Your Program

How does this get executed? My personal preference is to modify my
F<dogecoin.conf> file to add this command. I like to write a little shell
wrapper to set up the environment correctlyN<As you might do for a C<cron>
command.>:

=begin programlisting

    #!/bin/bash

    export CONFIG_FILE=/home/dogecoin-tricks-book/chapter_3/env.json
    cd /home/dogecoin-tricks-book/chapter_3/

    perl -Ilib bin/show_block_stats.pl

=end programlisting

This file sets the path to my RPC credentials configuration file and makes sure
Perl knows which paths to search to load my C<RPCAgent> module.

All that's left is to add a single line to F<dogecoin.conf>:

=begin programlisting

blocknotify=/bin/bash /home/dogecoin-tricks-book/chapter_3/bin/launch_listener.sh "%i" "%s" >> blocks.log

=end programlisting

Again, this looks a lot like what you'd use to set up a cron job on a Unix system.

The C<%i> parameter is the height of the new block and the C<%s> parameter is
the hash of the new block. Whenever the Core processes a new block, it'll
launch a system process and pass those two values as variables. In this case,
the system will invoke the C<bash> shell which will itself invoke C<perl>, and
away things go.

If you make this change, you'll have to restart your node before the Core will
start executing this command.

=head2 *Understand the Risks

As with any use of RPC against a local Core, you should enable authentication
and authorization (see L<authenticate_rpc_securely>) and keep unauthorized
activity away from your node. This is especially true if you have a wallet
attached to your node (so try to avoid doing that). Anyone who can connect to
your node via RPC can get a lot of data you might not want to expose and take
network actions you might not want to permit.

Second, be aware that you could write buggy codeN<I sure did, the first couple
of times I tried this.>. I wrote the example code in such a way that I could
test my program in isolation by providing block heights and hashes I already
had without having to test the integration in my F<dogecoin.conf> file. This
let me fix bugs without launching and relaunching the Core.

Okay, I I<didn't> do that the first couple of times, but I wish I had, so I
recommend you learn from my mistake and do it right the first time.

If you do get your program into a crash loop, you might harm the stability of
the system and the experience for you and others on the machine. Don't let that
stop you from doing interesting things but do be careful to think about what
could go wrong.

=head2 *What Can You Do With This?

I already suggested a couple of interesting ideas, but the world is open at
this point.

Perhaps you can light up a lava lamp whenever you make or receive a
transaction.

You could update a counter on a webpage or post a message to Slack or Discord
with every new block mined.

You could plot the size and fullness of blocks over time.

You could keep a list of the busiest wallets over the past day, week, or month.

I'm sure you'll come up with a few more clever ideas that aren't on this list
either.
