=head1 Enhance RPC Calls

Z<enhance_rpc_calls>

X<RPC commands>

Because Dogecoin has Bitcoin, Litecoin, and Luckycoin in its pedigree--and in
its code--you can often find guides and documentation written for those coins
that work for Dogecoin.

Sometimes you can't, however.

For example, the current major version of Bitcoin (version 24.x) supports
several RPC calls that use and manipulate and query address labels. The current
major version of Dogecoin (version 1.14.x) doesn't support these features.

You're not out of luck if you want these features. You just have to be a little
creative.

=head2 *Proxy RPC Calls

Think of a label as a nickname. Any operation you want to do on an address, you
can do on a label instead. If you have  the ability to associate a label with
an address, you're off to the races.

X<< external programs; C<cpanm> >>
X<< external programs; C<dogeutils> >>
X<< Perl libraries; C<Finance::Dogecoin::Utils> >>

What do you need to make this work? Well you I<could> install a toolkit named
C<Finance::Dogecoin::Utils> from CPANN<Use the command C<cpanm
Finance::Dogecoin::Utils> if you have Perl installed. Otherwise see
U<https://platform.activestate.com/chromatic/Dogecoin-Utils> for Windows, Mac
OS X, and Linux installers.>, as it provides a command named C<dogeutils>, or
you could do the work yourself.

What do you need?

=head3 *Associate Labels with Addresses

X<< RPC commands; C<setlabel> >>

First, you need a way to associate a label with an address. Bitcoin has an RPC
call named C<setlabel> which does this in the current wallet. It takes two
arguments, the C<address> to associate and the C<label> to use.

This already suggests a lot of the implementation.

The C<Finance::Dogecoin::Utils> library uses this information to populate a
JSON file inside a configuration directory (F<~/.local/share/dogeutils/> on a
Linux system). This JSON file contains an object which maps a label to an
address. For example:

=begin programlisting

    {
      "Dogecoin Book Tips":
          "DAY5wNkebzEyqUXCkN9koKNBuzXRKRTjcL"
    }

=end programlisting

Writing this as a plain text file has several benefits: you can move it between
machines and you can edit by hand if you want, and it's not tied to any wallet
format. You can read or write it with anything that understands JSON.

The drawback is that it's not attached to your wallet itself, although that may
be a benefit. If someone gets their hands on this file, they'll know you have
interest in these addresses (especially if your labels are meaningful), but
they won't get your wallet itself or your keys.

With the C<dogeutils> command provided by the Perl code mentioned earlier, you
could achieve this by using the command line:

=begin screen

  $ B<dogeutils setlabel DAY5wNkebzEyqUXCkN9koKNBuzXRKRTjcL \>
        B<'Dogecoin Book Tips'>

=end screen

=head3 *Proxy RPC Calls to a Node

X<< external programs; C<curl> >>
X<< Python libraries; C<requests> >>

Next you need a way to make calls to a running Core node. First, set up
authentication (see L<authenticate_rpc_securely>). With a username and
password, you can use any HTTP client or library such as C<curl> or Python's
C<requests> to make requests of the node and relay back the responses.

Handling passwords securely can be tricky. You I<could> use an authcookie
solution. The Perl library uses a username and password approachN<Until someone
suggests something better!> with credentials stored in a JSON file in the
configuration directory.

When the C<dogeutils> program starts, it looks for a username provided on the
command line (or in an environment variable) and then looks up the password for
that username in the authentication file. If found, any call it makes to the
actual Core node will send that username and password.

X<< RPC commands; C<setlabel> >>

With authentication set up, now you need to call a method via HTTP. In the
example of Bitcoin's C<setlabel> call, you must make a C<POST> requests to your
node's IP address on the right port to a URL containing your username and
password, providing a JSON body containing the appropriate data.

With the Core running on your machine, connect to C<localhost:22555> with a URL
like C<http://user:pass@localhost:22555/>. Set a C<Content-Type> header of
C<application/json> and C<POST> encoded JSON:

=begin programlisting

  {
    "jsonrpc": "1.0",
    "id": "some identifier here",
    "method": "setlabel",
    "params": [
      "DAY5wNkebzEyqUXCkN9koKNBuzXRKRTjcL",
      "Dogecoin Book Tips"
    ]
  }

=end programlisting

Note how close that looks to the C<dogeutils> command earlier.

=head3 *Wrap Calls That Don't Exist

X<< RPC commands; C<getreceivedbylabel> >>

What good is this?

Besides C<setlabel>, Bitcoin provides an RPC call called C<getreceivedbylabel>,
which returns the amount of coins received by the address(es) associated with a
label. This does the same thing as C<getreceivedbyaddress> except its argument
is a label, not an address.

This is fixable. C<dogeutils> has a little bit of glue code to understand it
should provide both C<setlabel> (which doesn't talk to a Core node) and
C<getreceivedbylabel> (which does). The I<implementation> of the thing that
looks like a C<getreceivedbylabel> call is entirely within the C<dogeutils>
program. Given a label, it looks up the associated address in the JSON file,
then calls C<getreceivedbyaddress> with the address and returns the resulting
JSON verbatim.

That's it.

As long as you have some way of communicating with a Core node, some way of
managing user authentication, and some type of local storage (hard-coded data,
a JSON file, an SQLite database, whatever), you have lots of options.

=head2 *Understand the Risks

RPC against a Dogecoin Core node needs authentication. Maybe you grow weary
reading this reminder. Enable authentication and manage it securely.

The authentication approach described here has a flaw; leaving your password in
the clear even in a file you control means anyone who can get access to that
file has your password. It'd be more secure to store it in a local keychain
somewhere. Alternately, you could force the secure entry of your password on
the command line every time you run a command like C<dogeutils>.

This is probably secure enough if you're running this program against a Core
node running on the same machine, because that's just as vulnerable to anyone
who can modify your F<dogecoin.conf> file and add password entries or read the
authentication cookie. If you're running your utility over the network (or
connecting to a Core over a network), ensure that the network is secure.

=head2 *What Can You Do With This?

You can use this to provide RPC calls not yet supported by the current Dogecoin
Core, but you can provide other features as well.

Want to get all of the transactions at a specific block height? Chain together
several RPC commands and make your own utility call.

Want to list blocks in reverse order? You can do that.

Want to turn addresses into labels in the output? You can do that too.

You're also not limited to I<modifying> calls. You could provide an access
control mechanism where certain user accounts can access specific types of
calls. For example, you might have read-only accounts that can read general
blockchain data such as looking at blocks or transactions and provide other
accounts that can create transactions or work with wallets.
