=head1 Analyze Block Metadata

Z<analyze_block_metadata>

With block metadata in a database (see L<export_block_metadata>) you can ask
arbitrary questions about block data. A database provides I<structure> for the
data in a way that allows you to perform somewhat arbitrary analysis of the
data.

If that sounds abstract, it's okay. This is an entire field of knowledge with a
lot of theory and practice behind it, but with some basic understanding, you
can accomplish a lot!

X<< external programs; C<sqlite> >>

To start, with SQLite available, open a command-line window (a terminal app on
Mac OS X, something like Powershell on Windows, and a terminal app on Linux or
another Unix-like system). Here are several examples of questions you can
answer with querying power of a relational database.

=head2 *Count Blocks by Day

How many blocks get mined in a day? You could take the author's word that a
block gets mined, on average, every 60 seconds so there should be around 1440
(60 * 24) blocks per day, but is any day actually average?

X<concepts; SQL>
X<people; Donald Chamberlin>

With your F<blockstats.sqlite> database, type C<sqlite3 blockstats.sqlite>.
You'll get a command prompt at which you can enter SQLN<Structured Query
Language, pronounced sequel or ess-cue-ell or squirrel or whatever you prefer,
as Donald Chamberlin once told the author.> A SQL query is a request to the
database to read, write, update, or delete some data stored in a database.

Here you can read data.

What does it mean to count blocks by day? Based on the structure of this data,
each block has its mining time as measured in epoch seconds. That means a query
of the C<blockstats> table to count all blocks per day must group blocks into
days somehow.

As it turns out, the SQL query reads I<exactly> like that, for a very generous
reading of the word "exactly". Type this query:

=begin screen

  sqlite> B<SELECT COUNT(*), DATE(DATETIME(epochtime, 'unixepoch'))>
  B<FROM blockstats>
  B<< WHERE DATE(DATETIME(epochtime, 'unixepoch')) >= '2023-04-01' >>
  B<GROUP BY 2>
  B<ORDER BY 2;>

  1353|2023-04-01
  1328|2023-04-02
  1347|2023-04-03
  1335|2023-04-04
  1346|2023-04-05
  1354|2023-04-06
  1349|2023-04-07
  1354|2023-04-08
  ...

=end screen

The indentation here doesn't matter for the operation of the code, but it makes
reading the query easier. Look at the first word of each line.

C<SELECT> tells the database that this is a read operation. It won't modify
data or delete anything. All it wants to do is grab some data based on certain
conditions. The rest of the line describes two columns of data to see in the
output (and you can see them in the output). Hold that thought.

C<FROM> tells the database the source of the data. There's only one table in
this database so far, but it's good to be specific in SQL.

C<WHERE> is optional. Here it filters the data to a specific subset.

C<GROUP BY> will make more sense in a moment. In effect, it's a way of telling
the database to collect a bunch of data into buckets that make sense based on
other conditions. Here C<2> refers to the second column (columns follow the
C<SELECT> keyword).

C<ORDER BY> is optional. Here it tells the database to sort the output by one
specific column, again the second column.

What are these columns?

C<COUNT(*)> is an intrinsic operator that tells the database to count things.
In technical terms, it's an aggregate operator, which means that, on its own,
no matter how much data is in the table, you'll get one result. If you wrote
C<SELECT COUNT(*) FROM blockstats;>, you'd get a count of the total number of
rows in the table.

C<DATE(DATETIME(epochtime, 'unixepoch'))> is kind of a messN<The kind that
makes your author wonder if he made your life more difficult by not converting
the exported data, but roll with it for now.> You may recognize the
C<epochtime> column from when you inserted data into the database. This
expression has two conversions. First, C<DATETIME(epochtime, 'unixepoch')> asks
SQLite to take the value of C<epochtime> and convert it from Unix epoch seconds
into a date and time value, like "high noon on April 22", but a little more
mathy. That's a lot more helpful for visual display, because C<2023-04-08>
makes a lot more sense than however many seconds is in 53 years, four months,
and eight days.

The outer function, C<DATE(...)> truncates a date and time value into only a
date, which is useful because the point of this query is to count how many
blocks get mined per day.

You see the calculation for that second column repeated after the C<WHERE>
keyword; converting the C<epochtime> column to a date again makes the
comparison against April 1, 2023 work correctly. With that filter in place,
SQLite will examine only those rows representing blocks mined at or after
2023-04-01.

That gives you enough information to understand C<GROUP BY> now. Remember that
C<COUNT(*)> produces a single value. That means the first of the two selected
columns is an aggregate. The other column isn't; if you wrote a query C<SELECT
DATE(...) FROM blockstats>, you'd get one result for every row in the table.
SQLite can't reconcile the different cardinality of these two columns on its
own, so it's up to you to disambiguate. You need I<more> count rows and
I<fewer> date rows.

C<GROUP BY 2> means "put the contents of each row into a bucket based on its
date". The output is equivalent to writing a bunch of C<SELECT COUNT(*) FROM
blockstats WHERE DATE(...) = '2023-04-01'> queries and pasting the output
together yourself, but why not make the computer do the dirty work for you?

=head2 *Count Transactions by Day

With that under your belt, you might be thinking "If the author's wrong about
1440 blocks per day, maybe he's right about the number of transactions per
day". Fortunately for your author's ego, at the time of this writing the number
of transactions per day saw some spikes.

Try this query.

=begin screen

    sqlite> B<SELECT SUM(txcount), DATE(DATETIME(epochtime, 'unixepoch'))>
    B<FROM blockstats>
    B<< WHERE date(datetime(epochtime, 'unixepoch')) >= '2023-05-07' >>
    B<GROUP BY 2>
    B<ORDER BY 2;>
    18681|2023-05-07
    20444|2023-05-08
    41033|2023-05-09
    49918|2023-05-10
    457854|2023-05-11
    398786|2023-05-12
    629570|2023-05-13

=end screen

You've seen a lot of this query before, but C<SUM(txcount)> is different. The
C<txcount> column contains the number of transactions in each block. Like
C<epochtime>, it's a scalar (non-aggregate) column. For C<GROUP BY> to do the
right thing here, the number of transactions column has to become an aggregate
column. Fortunately, C<SUM(...)> aggregates all of the rows bucketed by a
single day and, as the name suggests, adds their values together.

=head2 *What Can You Do With This?

Given what you've seen here, you can modify or adapt these queries to count or
sum any data you've collected over any timeframe. For example, to see the
number of transactions by hour, change the column you're selecting on from
C<DATE> to another SQLite expression that lets you group by day and hour (or
only hour, if you're looking at a single day).

If you add other data to this database when you export it from your node, you
can count and group that data as well.

What if you want to calculate things like averages? Read on!
