=head1 Turn Transactions into Songs

Z<turn_your_transactions_into_songs>

Crypto is math. At its core, we're moving big numbers around. Any meaning those
numbers have is meaning that we humans put onto them. The Dogecoin network
I<interprets> some of those numbers. So does the Core software. Yet the value
of the Dogecoin in your wallet is a consensual agreement among everyone in the
Dogecoin community that a set of numbers reachable from another set of numbers
and indexed by a third set of numbers represents something special and unique
to I<you>.

Meaning is an external property of use. What if those numbers also represented
something else? What if they could create art, an image, a visualization, a
game, or sound?

They can!

=head2 *Generated Music

At the intersection of computer programming, music theory, and art sits
something called "generated music", where a computer program assembles a bunch
of numbers that match and flow sonically together in unique waysN<Oh, yes:
music is math too!>. Given patterns to assemble and a starting point, the
system can produce an infinite stream of audio, if you put it together
correctly.

For example, Dogecoin developer langerhansN<U<https://github.com/langerhans>.>
created a website that generates sound using data from the Dogecoin
networkN<U<https://langerhans.github.io/dogelisten/>.>.

Similarly, your author created a project with the descriptive but unexciting
name of C<GenMIDIPython> to do something similar with your own data.

=head3 *Random Seeds and Random Meaning

How does music come from your own data?

Think about how computers think about randomness. Computers are predictable, no
matter how much misbehave at the most inopportune times. Given a computer
program which relies on only its inputs (it has no any hidden inputs outside of
your control, like "it reads from a clock" or "it counts network packets it
receives"), you should always get the same outputs for the same inputs.

When a computer generates a random number, it generally does so by using either
a pseudo-random process I<or> an external source of data that's sufficiently
unpredictable it can serve as randomness (the time between network packets
received, the way you move your mouse or hit keys on your keyboard). For more
details, research pseudo-random number generationN<Start with Wikipedia's
U<https://en.wikipedia.org/wiki/Pseudorandom_number_generator>.>.

To give the I<appearance> of randomness, you want unpredictability (see
L<embrace_entropy>). To get unpredictability from a deterministic algorithm,
you want to start from a different--and unpredictable--place each time. A
I<good> random number generator often has a I<seed> value. With different
seeds, you'll get different (apparently random) results. With the I<same> seed,
you'll get apparently random results but the same seed will always produce the
same results.

In other words, if you provide a seed to a program and if that program
initialized its random number generator with that seed, the random numbers it
generates will always be the same throughout its run.

What if you used a Dogecoin address or transaction ID (a large number that's
difficult to predict and essentially random enough for our purposes) as a
random seed?

=head3 *Turning Transactions and Addresses into Seeds

X<< RPC commands; C<listreceivedbyaddress> >>

Are transaction and address numbers random enough? Recall the tip (see
L<find_all_received_addresses>) that discussed the use of
C<listreceivedbyaddress>. Even looking at the first 6 characters of addresses,
there's a fair amount of variation in the data. While all of these Dogecoin
addresses start with C<D>, they go all over the place after that.

For more variance, pick an entire transaction ID, every bit of it. They are
large numbers, and no one can predict them easily before they're created, so
they provide plenty of potential uniqueness.

=head3 *Making Music

Now that you have a seed (or several), install the code for
C<GenMIDIPython>N<See U<https://github.com/chromatic/GenMIDIPython> for
installation instructions.>.  When you have the code up and running, type:

=begin screen

  $ B<python3 gen_atmospheric_chords.py <your transaction id>>
    ['C', 'Eb', 'G'] -> C
    ['E', 'G', 'B'] -> E
    ['B', 'D#', 'F#'] -> B
    ['C', 'Eb', 'G', 'Bb'] -> C
    ['A', 'C', 'E'] -> A
    ['C', 'E', 'G', 'B'] -> C
    ['B', 'D', 'F'] -> B
    ['E', 'G', 'B'] -> E
    ['E', 'G#', 'B'] -> E
    ['F', 'Ab', 'C'] -> F
    ['G', 'Bb', 'D'] -> G
    ['F#', 'A', 'C'] -> F#
    ['B', 'D#', 'F#', 'A#'] -> B
    ['F#', 'A#', 'C#', 'E'] -> F#
    ['E#', 'G#', 'B'] -> E#
    ['F', 'Ab', 'C'] -> F

=end screen

If your transaction ID is C<12345abc>, this will write a MIDI file named
F<atmospheric-chords-12345abc.id>. If your transaction ID is that exact number,
you should get that exact output, at least if you're running the same version
of Python and its libraries that your author used.

X<external programs; VLC>
X<external programs; FluidSynth>

What can you do with this file?

The VLC media playerN<U<https://www.videolan.org/vlc/>> can open this file on
most desktop operating systems and listen to it. If you prefer the command-line
interface, the FluidSynth playerN<U<https://www.fluidsynth.org/>> can do the
same.

=begin tip Make This Sound Better

MIDI files I<do> include instrument information, but they I<don't> include any
samples that make a trumpet or jazz guitar sound like real instruments.
FluidSynth supports instrument samples in a form called SoundFont. Choosing the
right SoundFont can turn a MIDI file that sounds like an old '80s home arcade
game into something cool. VLC can use FluidSynth sound fonts.

For these compositions, the author recommends a science fiction or ambient
synthesizer sound; you can find lots of SoundFont files online worth trying.
Half the fun is experimenting with what turns something simple and basic into
something smooth and enjoyable.

=end tip

=head2 *What Can You Do With This?

Supposedly a Russian proverb says "The marvel is not that the bear dances well,
but that the bear dances at all." If you have musical training or composition
experience, you might rightly say "This randomly-generated music could be a
I<lot> better."

You're absolutely right! The point of this tip is to show off the idea of art
or composition or invention that uses the seed of an ideaN<Pun intended!> to
create something new and surprising and inspiring. If you have music theory or
composition skills, you can modify the example code to follow a stronger
tonality in a specific key, to add other instruments and generate melodies, to
produce more than 16 bars of mostly-whole-note three-note chords, et cetera.

Just as a permissionless, distributed, global financial system can grow out of
mutual understanding and agreement about a bunch of numbers computers swap,
perhaps other interesting things can come from different interpretations of
those numbers. Look for ways to turn them into data and patterns that make your
ears perk up, your eyes widen, or your mind pay a little more attention to
something new.

=head2 *Understand the Risks

If you listen to this audio without headphones, you run the risk of annoying
the people around you. Alternately, you might amuse them. Enjoy wisely.
