=head1 Understand the Debug Log

Z<understand_the_debug_log>

If you launch the Core--especially if you don't launch the Qt GUI--a lot of
things happen, many invisible. You can go on your way, leaving your VM running
in the cloud, laptop plugged in on your desk, or tiny solar-powered device
nestled in a corner of your goat barn, and your Core node will contentedly hum
along. While you're enjoying the sunshine, your node is making and receiving
connections to relay data, validate transactions, and gather new blocks.

Unless you've set up your node to do something visible whenever something
happens (see L<take_actions_on_new_blocks>), you'll have to look at Dogecoin's
debug log to get more details about what's going on silently. Let's dig in!

=head2 *Where is the Log?

X<Dogecoin Core; debug log>
X<< configuration options; C<datadir> >>

By default, the Core writes debugging information to a file called F<debug.log>
in your data directory. If you've configured your own data directory with the
option C<datadir>, look there. Otherwise look in a directory named F<.dogecoin>
under your home directory on a Linux, BSD, or other Unix-like system. Look in
the F<Library/Application Support/Dogecoin> directory under your home directory
in a MacOS system. Look in a directory F<%APPDATA%\Dogecoin> on a Windows
system.

In all cases, you should see a text file named F<debug.log> that slowly grows
as your node continues to run.

=begin tip For Your Console Only

X<< configuration options; C<printtoconsole> >>

If you really need to debug something--if you're I<changing> the core, for
example--use the configuration option C<printtoconsole> to bypass writing to
F<debug.log>. This is only useful if you're I<launching> the Core from the
command line. Remember that output will go away when the terminal does unless
you redirect or capture it.

=end tip

=head2 *What's in the Log?

The Core prints a lot of messages to the long as it starts up. Most of these
are internal details and not very interesting, but in the case where you're
running on a slow machine (perhaps a tiny device, an underpowered cloud VM, an
aging laptop), you can watch the log file to see the progress.

Some of the initial data can be valuable for your on purposes. For example, you
might see something like this snippet:

=begin screen

  2023-04-15 21:26:05 Dogecoin version v1.14.7.0-cb9a47611
  2023-04-15 21:26:05 Default data directory /home/user/.dogecoin
  2023-04-15 21:26:05 Using data directory /home/user/.dogecoin
  2023-04-15 21:26:05 Set backupdir "/home/user/.dogecoin/backups"
  2023-04-15 21:26:05 Using backup directory
                      /home/user/.dogecoin/backups
  2023-04-15 21:26:05 Using config file
                      /home/user/.dogecoin/dogecoin.conf
  2023-04-15 21:26:10 Bound to [::]:22556
  2023-04-15 21:26:10 Bound to 0.0.0.0:22556

=end screen

You can see a few important details, including:

=over 4

=item * the version number of the CoreN<Looks like your author was using a
modified development version, probably something useful for the book.>

=item * the default and actual location of the data directory

=item * the directory where the Core will store wallet backups

=item * the location of the configuration file used

=back

The last two lines show that this node is listening on every available network
interface for IPv4 and IPv6 traffic. If you're concerned about specific network
security, use this information to help figure out if you've configured your
node appropriately.

=head2 *What Does It Mean?

After your node has run for a while, you'll see other types of messages:

=begin screen

  2023-04-15 21:27:49 receive version message: /Shibetoshi:1.14.6/:
      version 70015, blocks=4678120, us=67.189.98.209:42198, peer=3
  2023-04-15 21:32:19 connect() to [2602:fc05::32]:22556 failed
       after select(): No route to host (113)
  2023-04-15 21:36:09 UpdateTip: new best=af8461i... height=4678121
      version=0x00620104 log2_work=75.419327 tx=95260772
      date='2023-04-15 21:34:26' progress=1.000000
      cache=78.0MiB(10374tx)

=end screen

This example shows three different types of information, all useful. In your
log, these three lines will all be on single lines, but to fit printed pages,
they've broken across multiple lines.

The first line records a new connection from another Dogecoin node. This node
reports that it's running version 1.14.6 of the Core with a standard version
(see L<set_your_node_comment>). It uses version 70015 of the Dogecoin protocol
(the standard current version), has about 4.7 million blocks available
(remember this number), has an IPv4 address and port, and is the third peer
connected to the running node.

The second line indicates a network connection failure to another node over
IPv6. This is normal; nodes come and go. Sometimes backhoes make entire
networks of nodes temporarily invisible.

The third line will approximately once every minute. That probably gives away
what's happening. This node has received a new block with the given hash
(truncated in this example), at height 4,678,121. There are now 95,260,772
transactions in the entire blockchain, and the block's mining date was April
15, 2023 around 9:30 pm UTC. This block is the most recent block (otherwise
C<progress> would be less than 1.0 or 100%).

The C<log2_work> number represents the number of block hashes you'd have to
calculate to recreate the entire chain up to this block: two to the power of
75.419327 in this case. It measures the effort that's gone in to calculating
the chain of blocks of which the current block is the latest. You don't have to
understand all of this here.

If your node has been offline for a while and needs to sync, you'll see a lot
of C<UpdateTip> messages. If your node is fully synced, you'll see log lines as
new blocks get mined.

=head2 *What Can You Do With This?

If you're the author of this book, asking "How does one know how many
transactions are in this system" (see L<calculate_your_dogecoin_footprint>),
you can look at that third log line and think "Wait a minute, I<something> is
counting that already" and realize you have much less work to do than you
thoughtN<Sigh?>.

If you're interested in mapping nodes on the network, you can analyze node
connection logs to see how many nodes are available, the versions of the
network they support, the versions of the Core they run, their node comments,
and any other information you can derive from things like IP addresses and
block counts.

If you're interested in mining statistics, you can examine the C<UpdateTip>
messages to determine the approximate mining difficulty at any point, the
number of seconds between blocks, the average number of transactions per block
at any period of time, et cetera. While this information is available
historically from other sources and commands, taking it from log data is cheap
and easy for people who are comfortable processing logs as they arrive.
