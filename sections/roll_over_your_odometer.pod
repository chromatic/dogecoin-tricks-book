=head1 Roll Over Your Odometer

Z<roll_over_your_odometer>

Imagine it's 1979 and you're really, really good at the arcade game Asteroids.
Every 10,000 points you gain a new ship. What's the high score?

99,990.

At that point, the score resets to zero, although apparently you can buy a
special add-on which increases this limit to 9,999,990N<The things you learn
researching cryptography for a book about funny dog money! Search for
"Asteroids High Score Kit".>. This mod still has an upper limit, at which point
the score resets to zero and starts over. The previous sentence has a pun, and
you're about to understand why.

This feature turns out to be really important in cryptography.

=head2 *Romulus, Remus, Modulus, and Remainder

Think of the high score counter as an odometer in a vehicle or the hands on a
clock. There's an upper limit (12 or 24 hours on a clock, hundreds of thousands
of miles or kilometers in an automobile, a hundred thousand or a hundred
million points in Asteroids). Once you exceed the limit, you start over.

X<concepts; modulus>
X<concepts; remainder>

This is an expression of a mathematical concept called a I<modulus>. You may
have heard of it as a I<remainder>. You can even demonstrate it by counting on
your fingers, from one to ten.

Suppose you want to add the two prime numbers five and seven. Count on your
fingers. Raise seven fingers, then raise five more. When all of your fingers
are upN<If you have more or fewer than ten fingers; that's okay. You'll get a
different answer, but the same concept applies!>, lower them all again but keep
counting. The number of fingers you have raised at the end is 7 + 5 mod the
number of fingers. If you have 10 fingers, 7 + 5 mod 10 is 2. If you have 9
fingers, 7 + 5 mod 9 is 3.

=head2 *What's Really Going On

Why does this matter? If you're doing something like calculating a hash of data
(L<make_a_hash_of_fingerprints>), you want the output to have two properties.
First, you want the output to have the same number of bits regardless of the
size of the input. Short inputs and large inputs should produce output that's
the same size. Second, you want attackers to have a high difficulty predicting
what kind of changes to inputs produce what kind of outputs.

In both cases, dealing with really large numbers but constraining the results
to a narrow range helps.

That's what modulus does. You'll see it in all sorts of cryptographic
applications. It happens in non-cryptographic applications too, including days
of the week, minutes in the hour, degrees of a circle, months of the year,
names of notes in the 12-tone Western scale, and the Roman nundinae, or 8-day
market/work week.

For our purposes, it has one other essential property. Given arbitrary inputs
and a modulus, you actually I<lose> information. Multiply 2 by 7 mod 10 and you
get 4. Also multiply 6 by 4 mod 10 and get 4. Multiply 12 by 2 mod 10 and get
4. Given the answer of "4" and a modulus of "10", you can only guess at many,
many integers you could multiply together to get that answer.

In other words, you're going to have a lot more difficulty I<reversing> the
calculation to figure out its initial inputs, even if you have part of the
equation. That irreversibility turns out to be an essential property of
cryptography.
